# this is an example file with all possible values
# that can be used for the customization of the cbcontainers-agent chart

# accessToken is the API token used by the agent to communicate with the backend
accessToken: ""
# orgKey is the ID of the organization account
orgKey: "ABC123"
# version is the version of the agent that will be installed
version: "2.4.0"
# clusterGroup is the group that the cluster will belong to.
clusterGroup: "default"
# clusterName is the name that will be used for the cluster that the agent is installed on
clusterName: "test-cluster"
# accessTokenSecretName is the name of the Kubernetes object of type Secret that holds the values of the Access Token
accessTokenSecretName: "my-access-token-secret-name"
# agentNamespace is the name of the namespace in which the agent will be installed
# that namespace should exist before the chart is installed
agentNamespace: "cbcontainers-dataplane"
# gateways is the collection of gateways that will be used to communicate with the CBC backend
gateways:
  gatewayTLS:
  apiGatewayHost: https://api.gateway.com
  coreEventsGatewayHost: https://events.gateway.com
  hardeningEventsGatewayHost: https://hardening.events.gateway.com
  runtimeEventsGatewayHost: https://runtime.events.gateway.com
# components is the set of components that will be installed
components:
  # basic is the configuration of the basic features
  basic:
    # enforcer is the configuration of the enforcer service
    enforcer:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      env: {}
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      replicasCount: 1
      prometheus:
        port: 7071
        enabled: false
      image:
        repository: "cbartifactory/guardrails-enforcer"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      probes: {}
      nodeSelector: {}
      affinity: {}
      webhookTimeoutSeconds: 5
      enableEnforcementFeature: true
      failurePolicy: "Ignore"
    # monitor is the configuration of the monitor service
    monitor:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      env: {}
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      image:
        repository: "cbartifactory/monitor"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      probes: {}
      nodeSelector: {}
      affinity: {}
    # stateReporter is the configuration of the state reporter service
    stateReporter:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      env: {}
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      image:
        repository: "cbartifactory/guardrails-state-reporter"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      probes: {}
      nodeSelector: {}
      affinity: {}
  # runtimeProtection is the configuration of the runtime features
  # if omitted, the runtime components won't be installed
  runtimeProtection:
    enabled: true
    internalGrpcPort: 8080
    resolver:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      replicasCount: 1
      env: {}
      image:
        repository: "cbartifactory/runtime-kubernetes-resolver"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      probes: {}
      prometheus:
        port: 7071
        enabled: false
      nodeSelector: {}
      affinity: {}
    sensor:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      env: {}
      image:
        repository: "cbartifactory/runtime-kubernetes-sensor"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      probes: {}
      prometheus:
        port: 7071
        enabled: false
      verbosity: 2
  # clusterScanning is the configuration of the cluster scanning features
  # if omitted, the cluster scanning components won't be installed
  clusterScanning:
    # enabled controls whether the cluster scanning features will be enabled
    enabled: false
    imageScanningReporter:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      replicasCount: 1
      env: {}
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      image:
        repository: "cbartifactory/image-scanning-reporter"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      probes: {}
      prometheus:
        port: 7071
        enabled: false
      nodeSelector: {}
      affinity: {}
    clusterScanner:
      labels: {}
      deploymentAnnotations: {}
      podTemplateAnnotations: {}
      env: {}
      resources:
        requests:
          memory: "64Mi"
          cpu: "30m"
        limits:
          memory: "256Mi"
          cpu: "200m"
      image:
        repository: "cbartifactory/cluster-scanner"
        tag: "2.3.1"
        pullPolicy: "IfNotPresent"
      probes: {}
      prometheus:
        port: 7071
        enabled: false
  settings:
    daemonSetsTolerations:
    createDefaultImagePullSecrets: true
    imagePullSecrets: 