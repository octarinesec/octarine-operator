{{- $workerImageTag := default .Values.global.octarine.version .Values.worker.image.tag -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "nodeguard.worker.fullname" . }}
  labels:
{{ include "nodeguard.worker.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "nodeguard.worker.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "nodeguard.worker.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "nodeguard.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.worker.terminationGracePeriod }}
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
    {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: host-docker-sock
          hostPath:
            path: /var/run/docker.sock
      priorityClassName: {{ include "octarine.priorityClass.name" . }}
      containers:
        - name: {{ include "nodeguard.worker.name" . }}
          image: "{{ .Values.worker.image.repository }}:{{ $workerImageTag }}"
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.worker.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
          readinessProbe:
            periodSeconds: 30
            exec:
              command:
                - cat
                - {{ .Values.worker.probes.readinessPath }}
          livenessProbe:
            periodSeconds: 30
            initialDelaySeconds: 5
            exec:
              command:
                - cat
                - {{ .Values.worker.probes.livenessPath }}
          volumeMounts:
            - name: host-docker-sock
              mountPath: /var/run/docker.sock
          command:
            - "/run_worker.sh"
          args:
            - "-v"
            - "2"
          env:
            {{ include "octarine.common.env" . | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "nodeguard.worker.configmap.env.fullname" . }}
            {{ include "octarine.common.envFrom" . | nindent 12 }}