// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/cbcontainers-operator/remote_configuration (interfaces: ApiGateway)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vmware/cbcontainers-operator/cbcontainers/models"
)

// MockApiGateway is a mock of ApiGateway interface.
type MockApiGateway struct {
	ctrl     *gomock.Controller
	recorder *MockApiGatewayMockRecorder
}

// MockApiGatewayMockRecorder is the mock recorder for MockApiGateway.
type MockApiGatewayMockRecorder struct {
	mock *MockApiGateway
}

// NewMockApiGateway creates a new mock instance.
func NewMockApiGateway(ctrl *gomock.Controller) *MockApiGateway {
	mock := &MockApiGateway{ctrl: ctrl}
	mock.recorder = &MockApiGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGateway) EXPECT() *MockApiGatewayMockRecorder {
	return m.recorder
}

// GetCompatibilityMatrixEntryFor mocks base method.
func (m *MockApiGateway) GetCompatibilityMatrixEntryFor(arg0 string) (*models.OperatorCompatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibilityMatrixEntryFor", arg0)
	ret0, _ := ret[0].(*models.OperatorCompatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibilityMatrixEntryFor indicates an expected call of GetCompatibilityMatrixEntryFor.
func (mr *MockApiGatewayMockRecorder) GetCompatibilityMatrixEntryFor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibilityMatrixEntryFor", reflect.TypeOf((*MockApiGateway)(nil).GetCompatibilityMatrixEntryFor), arg0)
}

// GetConfigurationChanges mocks base method.
func (m *MockApiGateway) GetConfigurationChanges(arg0 context.Context, arg1 string) ([]models.ConfigurationChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationChanges", arg0, arg1)
	ret0, _ := ret[0].([]models.ConfigurationChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationChanges indicates an expected call of GetConfigurationChanges.
func (mr *MockApiGatewayMockRecorder) GetConfigurationChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationChanges", reflect.TypeOf((*MockApiGateway)(nil).GetConfigurationChanges), arg0, arg1)
}

// GetSensorMetadata mocks base method.
func (m *MockApiGateway) GetSensorMetadata() ([]models.SensorMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorMetadata")
	ret0, _ := ret[0].([]models.SensorMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorMetadata indicates an expected call of GetSensorMetadata.
func (mr *MockApiGatewayMockRecorder) GetSensorMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorMetadata", reflect.TypeOf((*MockApiGateway)(nil).GetSensorMetadata))
}

// UpdateConfigurationChangeStatus mocks base method.
func (m *MockApiGateway) UpdateConfigurationChangeStatus(arg0 context.Context, arg1 models.ConfigurationChangeStatusUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationChangeStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfigurationChangeStatus indicates an expected call of UpdateConfigurationChangeStatus.
func (mr *MockApiGatewayMockRecorder) UpdateConfigurationChangeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationChangeStatus", reflect.TypeOf((*MockApiGateway)(nil).UpdateConfigurationChangeStatus), arg0, arg1)
}
