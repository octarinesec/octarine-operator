// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/cbcontainers-operator/cbcontainers/monitor (interfaces: HealthChecker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "k8s.io/api/admissionregistration/v1beta1"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
)

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// GetDaemonSets mocks base method.
func (m *MockHealthChecker) GetDaemonSets() (map[string]v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSets")
	ret0, _ := ret[0].(map[string]v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSets indicates an expected call of GetDaemonSets.
func (mr *MockHealthCheckerMockRecorder) GetDaemonSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSets", reflect.TypeOf((*MockHealthChecker)(nil).GetDaemonSets))
}

// GetDeployments mocks base method.
func (m *MockHealthChecker) GetDeployments() (map[string]v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployments")
	ret0, _ := ret[0].(map[string]v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments.
func (mr *MockHealthCheckerMockRecorder) GetDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockHealthChecker)(nil).GetDeployments))
}

// GetPods mocks base method.
func (m *MockHealthChecker) GetPods() (map[string]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods")
	ret0, _ := ret[0].(map[string]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods.
func (mr *MockHealthCheckerMockRecorder) GetPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockHealthChecker)(nil).GetPods))
}

// GetReplicaSets mocks base method.
func (m *MockHealthChecker) GetReplicaSets() (map[string]v1.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaSets")
	ret0, _ := ret[0].(map[string]v1.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaSets indicates an expected call of GetReplicaSets.
func (mr *MockHealthCheckerMockRecorder) GetReplicaSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaSets", reflect.TypeOf((*MockHealthChecker)(nil).GetReplicaSets))
}

// GetValidatingWebhookConfigurations mocks base method.
func (m *MockHealthChecker) GetValidatingWebhookConfigurations() (map[string]v1beta1.ValidatingWebhookConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatingWebhookConfigurations")
	ret0, _ := ret[0].(map[string]v1beta1.ValidatingWebhookConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatingWebhookConfigurations indicates an expected call of GetValidatingWebhookConfigurations.
func (mr *MockHealthCheckerMockRecorder) GetValidatingWebhookConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatingWebhookConfigurations", reflect.TypeOf((*MockHealthChecker)(nil).GetValidatingWebhookConfigurations))
}
