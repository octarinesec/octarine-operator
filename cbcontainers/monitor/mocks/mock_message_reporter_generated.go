// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/cbcontainers-operator/cbcontainers/monitor (interfaces: MessageReporter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vmware/cbcontainers-operator/cbcontainers/monitor/models"
)

// MockMessageReporter is a mock of MessageReporter interface.
type MockMessageReporter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReporterMockRecorder
}

// MockMessageReporterMockRecorder is the mock recorder for MockMessageReporter.
type MockMessageReporterMockRecorder struct {
	mock *MockMessageReporter
}

// NewMockMessageReporter creates a new mock instance.
func NewMockMessageReporter(ctrl *gomock.Controller) *MockMessageReporter {
	mock := &MockMessageReporter{ctrl: ctrl}
	mock.recorder = &MockMessageReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReporter) EXPECT() *MockMessageReporterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageReporter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageReporterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageReporter)(nil).Close))
}

// SendMonitorMessage mocks base method.
func (m *MockMessageReporter) SendMonitorMessage(arg0 models.HealthReportMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMonitorMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMonitorMessage indicates an expected call of SendMonitorMessage.
func (mr *MockMessageReporterMockRecorder) SendMonitorMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMonitorMessage", reflect.TypeOf((*MockMessageReporter)(nil).SendMonitorMessage), arg0)
}
