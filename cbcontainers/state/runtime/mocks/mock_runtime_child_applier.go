// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/cbcontainers-operator/cbcontainers/state/runtime (interfaces: RuntimeChildK8sObjectApplier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/vmware/cbcontainers-operator/api/v1"
	options "github.com/vmware/cbcontainers-operator/cbcontainers/state/applyment/options"
	runtime "github.com/vmware/cbcontainers-operator/cbcontainers/state/runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRuntimeChildK8sObjectApplier is a mock of RuntimeChildK8sObjectApplier interface.
type MockRuntimeChildK8sObjectApplier struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeChildK8sObjectApplierMockRecorder
}

// MockRuntimeChildK8sObjectApplierMockRecorder is the mock recorder for MockRuntimeChildK8sObjectApplier.
type MockRuntimeChildK8sObjectApplierMockRecorder struct {
	mock *MockRuntimeChildK8sObjectApplier
}

// NewMockRuntimeChildK8sObjectApplier creates a new mock instance.
func NewMockRuntimeChildK8sObjectApplier(ctrl *gomock.Controller) *MockRuntimeChildK8sObjectApplier {
	mock := &MockRuntimeChildK8sObjectApplier{ctrl: ctrl}
	mock.recorder = &MockRuntimeChildK8sObjectApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeChildK8sObjectApplier) EXPECT() *MockRuntimeChildK8sObjectApplierMockRecorder {
	return m.recorder
}

// ApplyRuntimeChildK8sObject mocks base method.
func (m *MockRuntimeChildK8sObjectApplier) ApplyRuntimeChildK8sObject(arg0 context.Context, arg1 *v1.CBContainersRuntime, arg2 client.Client, arg3 runtime.RuntimeChildK8sObject, arg4 ...*options.ApplyOptions) (bool, client.Object, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyRuntimeChildK8sObject", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(client.Object)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ApplyRuntimeChildK8sObject indicates an expected call of ApplyRuntimeChildK8sObject.
func (mr *MockRuntimeChildK8sObjectApplierMockRecorder) ApplyRuntimeChildK8sObject(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRuntimeChildK8sObject", reflect.TypeOf((*MockRuntimeChildK8sObjectApplier)(nil).ApplyRuntimeChildK8sObject), varargs...)
}

// DeleteK8sObjectIfExists mocks base method.
func (m *MockRuntimeChildK8sObjectApplier) DeleteK8sObjectIfExists(arg0 context.Context, arg1 *v1.CBContainersRuntime, arg2 client.Client, arg3 runtime.RuntimeChildK8sObject) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteK8sObjectIfExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteK8sObjectIfExists indicates an expected call of DeleteK8sObjectIfExists.
func (mr *MockRuntimeChildK8sObjectApplierMockRecorder) DeleteK8sObjectIfExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteK8sObjectIfExists", reflect.TypeOf((*MockRuntimeChildK8sObjectApplier)(nil).DeleteK8sObjectIfExists), arg0, arg1, arg2, arg3)
}
