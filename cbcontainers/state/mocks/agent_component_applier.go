// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/cbcontainers-operator/cbcontainers/state (interfaces: AgentComponentApplier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/vmware/cbcontainers-operator/api/v1"
	agent_applyment "github.com/vmware/cbcontainers-operator/cbcontainers/state/agent_applyment"
	options "github.com/vmware/cbcontainers-operator/cbcontainers/state/applyment/options"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockAgentComponentApplier is a mock of AgentComponentApplier interface.
type MockAgentComponentApplier struct {
	ctrl     *gomock.Controller
	recorder *MockAgentComponentApplierMockRecorder
}

// MockAgentComponentApplierMockRecorder is the mock recorder for MockAgentComponentApplier.
type MockAgentComponentApplierMockRecorder struct {
	mock *MockAgentComponentApplier
}

// NewMockAgentComponentApplier creates a new mock instance.
func NewMockAgentComponentApplier(ctrl *gomock.Controller) *MockAgentComponentApplier {
	mock := &MockAgentComponentApplier{ctrl: ctrl}
	mock.recorder = &MockAgentComponentApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentComponentApplier) EXPECT() *MockAgentComponentApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockAgentComponentApplier) Apply(arg0 context.Context, arg1 agent_applyment.AgentComponentBuilder, arg2 *v1.CBContainersAgentSpec, arg3 ...*options.ApplyOptions) (bool, client.Object, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(client.Object)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Apply indicates an expected call of Apply.
func (mr *MockAgentComponentApplierMockRecorder) Apply(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockAgentComponentApplier)(nil).Apply), varargs...)
}

// Delete mocks base method.
func (m *MockAgentComponentApplier) Delete(arg0 context.Context, arg1 agent_applyment.AgentComponentBuilder, arg2 *v1.CBContainersAgentSpec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentComponentApplierMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentComponentApplier)(nil).Delete), arg0, arg1, arg2)
}
